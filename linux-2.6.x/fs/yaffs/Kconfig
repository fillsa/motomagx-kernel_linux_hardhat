#
# YAFFS file system configurations
#
config YAFFS1_FS
	tristate "YAFFS version 1 legacy implementation"
	help
	  Use obsolete YAFFS1 code.  Obsoleted by YAFFS2, which provides
	  YAFFS1 compatibility.

	  If unsure, say N.

	  Further information on YAFFS is available at
	  <http://www.aleph1.co.uk/yaffs/>.

config YAFFS1_MTD_ENABLED
	bool "NAND mtd support"
	depends on YAFFS1_FS
	help
	  This adds the yaffs file system support for working with a NAND mtd.

	  If unsure, say Y.

config YAFFS1_RAM_ENABLED
	bool "yaffsram file system support"
	depends on YAFFS1_FS
	help
	  This adds the yaffsram file system support. Nice for testing on x86,
	  but uses 2MB of RAM.  Don't enable for NAND-based targets.

	  If unsure, say N.

comment "WARNING: mtd and/or yaffsram support should be selected"
	depends on YAFFS1_FS && !YAFFS1_MTD_ENABLED && !YAFFS1_RAM_ENABLED

config YAFFS1_USE_OLD_MTD
	bool "Old mtd support"
	depends on YAFFS1_FS && 0
	help
	  Enable this to use the old MTD stuff that did not have yaffs support.
	  You can use this to get around compilation problems, but the best
	  thing to do is to upgrade your MTD support. You will get better speed.

	  If unsure, say N.

config YAFFS1_USE_NANDECC
	bool "Use ECC functions of the generic MTD-NAND driver"
	depends on YAFFS1_FS
	default y
	help
	  This enables the ECC functions of the generic MTD-NAND driver.
	  This will not work if you are using the old mtd.

	  NB Use NAND ECC does not work at present with yaffsram.

	  If unsure, say Y.

config YAFFS1_ECC_WRONG_ORDER
	bool "Use the same ecc byte order as Steven Hill's nand_ecc.c"
	depends on YAFFS1_FS
	help
	  This makes yaffs_ecc.c use the same ecc byte order as
	  Steven Hill's nand_ecc.c. If not set, then you get the
	  same ecc byte order as SmartMedia.

	  If unsure, say N.

config YAFFS1_USE_GENERIC_RW
	bool "Use Linux file caching layer"
	default y
	depends on YAFFS1_FS
	help
	  Use generic_read/generic_write for reading/writing files. This
	  enables the use of the Linux file caching layer.

	  If you disable this, then caching is disabled and file read/write
	  is direct.

	  If unsure, say Y.

config YAFFS1_USE_HEADER_FILE_SIZE
	bool "Use object header size"
	depends on YAFFS1_FS
	help
	  When the flash is scanned, two file sizes are constructed:
	  * The size taken from the object header for the file.
	  * The size figured out by scanning the data chunks.
	  If this option is enabled, then the object header size is used,
	  otherwise the scanned size is used.

	  If unsure, say N.

config YAFFS1_DISABLE_CHUNK_ERASED_CHECK
	bool "Turn off debug chunk erase check"
	depends on YAFFS1_FS
	default y
	help
	  Enabling this turns off the test that chunks are erased in flash
	  before writing to them.  This is safe, since the write verification
	  will fail.  Suggest enabling the test (ie. say N)
	  during development to help debug things.

	  If unsure, say Y.

#config YAFFS1_DISABLE_WRITE_VERIFY
#	bool "Disable write verify (DANGEROUS)"
#	depends on YAFFS1_FS && EXPERIMENTAL
#	help
#	  I am severely reluctant to provide this config. Disabling the
#	  verification is not a good thing to do since NAND writes can
#	  fail silently.  Disabling the write verification will cause your
#	  teeth to rot, rats to eat your corn and give you split ends.
#	  You have been warned. ie. Don't uncomment the following line.
#
#	  If unsure, say N.
#

config YAFFS1_SHORT_NAMES_IN_RAM
	bool "Cache short names in RAM"
	depends on YAFFS1_FS
	default y
	help
	  If this config is set, then short names are stored with the
	  yaffs_Object.  This costs an extra 16 bytes of RAM per object,
	  but makes look-ups faster.

	  If unsure, say Y.

 
