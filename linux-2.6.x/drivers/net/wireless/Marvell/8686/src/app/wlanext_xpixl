#!/bin/sh
#
# wlanext --- WLAN driver common initialization script


ethx="eth0"
usage="\nUsage:\nwlanext [-i <interface>]\n\nExample 1: 
      wlanext 2: wlanext -i eth1\n"

while [ $# -ge 1 ]; do
            case $1 in
            -i)    shift; ethx=$1;;
            -h)    echo -e 1>&2 $usage; exit;;
             *)    echo -e 1>&2 "\nInvalid argument $1"; echo -e 1>&2 $usage; exit;;
            esac
            shift
done

#
# Check for Local script
#
scriptPath=/mnt/msc_int0/wlan_driver/
scriptName=$scriptPath"wlanext"
if [ -f "$scriptName" ]; then
    sh $scriptName
else
    
    #echo ">>> Moving LED GPIO to GPIO3 <<<"
    iwpriv $ethx ledgpio 1 16 2 16 3 16 
       
    #echo ">>> setting WLAN_HOST_WAKEB as GPIO by FW to wakeup Host <<<"
    iwpriv $ethx hscfg 0xF 1 15  
        
    #echo ">>> setting beacon average weighting factor to 3 <<<"
    iwpriv $ethx setbcnavg 3

    #echo ">>> setting tx retry count to 9 <<<"
    iwconfig $ethx retry 9

    #echo ">>> setting transmit power to 13 (not used with power adaptation enabled - cmd removed)<<<"
    #iwconfig $ethx txpower 13

    #echo ">>> disable auto re-association <<<"
    iwpriv $ethx reasso-off

    #echo ">>> enable wmm <<<"
    iwpriv $ethx wmm 1

    #echo ">>> Set QoSinfo <<<"
    iwpriv $ethx wmm_qosinfo 0xF

    #echo ">>> disable Null packets <<<"
    iwpriv $ethx psnullinterval -1

    echo ">>> TX evm for low b rates  <<<"
    # improve start condition for TX evm for low b rates. This line should be removed when marvell includes this in their binary.
    wlanconfig $ethx wrrf 0x08 0x02

    #
    #    configure 88W8686 3 wire, single antenna BCA mode
    #
    echo
    echo ">>> configure 3 wire, single antenna BCA mode <<<"
    #  BCA WLAN modes:
    #  [25] - 8686: 0 = only BT TX gets grants, 1 = BT dir info ignored
    #  [15] - WLAN RX/TX request: 0 = are used, 1 = are blocked
    #  [12] - BCA: 0 = 2w, 1 = 3/4w
    #  [11] - Antenna: 0 = dual, 1 = single  
    #  [ 3] - WLAN signal indication: 0 = RX MAC, 1 = CCA
    wlanconfig $ethx wrmac 0xa5f0 0xa2279814
    #
    #  BCA mode configuration:
    #  [15..12] - BCA decision table for single antenna
    #  [ 9]     - WLAN inputs: 0 = edge, 1 = level
    #  [ 7...6] - WLAN RX prio: 00 = low, 10 = high, x1 = use 0xa598/0xa59c
    #  [ 5]     - WLAN RX frame destination: 0 = all, 1 = unicasts
    #  [ 3]     - BCA allowed to stop WLAN TX: 0 = no, 1 = yes
    #  [ 2...1] - BT frequency: 00 = oob, 10 = in-band, x1 = use BT_FREQ
    #  [ 0]     - Enable BCA: 0 = disabled, 1 = enabled 
    wlanconfig $ethx wrmac 0xa5a0 0x0000524D
    #
    #  BT switch control:
    #  [30..25] - antenna to WLAN RX [us] if no requests pending
    #  [24..19] - antenna to BT [us] if no requests pending 
    #  [18..17] - who gets antenna: 00 or 11 = as specified in [30:25] and [24:19],
    #                01 = given BT, 10 = given WLAN
    #  [16]     - T/R_ control: 0 = BCA, 1 = WLAN MAC
    #  [15]     - ANT_SEL_ control: 0 = BCA, 1 = WLAN MAC
    #  [11...8] - ANT_SEL_P, ANT_SEL_N, T/R_P, T/R_N when BT wins arbitration
    #  [ 7...4] - same for WLAN TX
    #  [ 3...0] - same for WLAN RX
    wlanconfig $ethx wrmac 0xa58c 0x00040865
    #
    #  BCA WLAN TX ok (dual antenna only):
    #  {WLAN prio, WLAN dir, BT prio, BT dir, freq} form pointer into this reg
    #wlanconfig $ethx wrmac 0xa5dc 0xffff0000
    #
    #  BCA BT TX ok (dual antenna only):
    #  {WLAN prio, WLAN dir, BT prio, BT dir, freq} form pointer into this reg
    #wlanconfig $ethx wrmac 0xa5e0 0x0000ffff
    #
    # BCA status (overrides can be performed for testing)
    # 0xC000 (Enable WLAN TX switch over-ride defined by A58C[7:4] ) 
    # 0x3000 (Enable WLAN RX switch over-ride defined by A58C[3:0] )
    # 0x30000 (Enable BT switch over-ride defined by A58C[11:8] )
    #wlanconfig $ethx wrmac 0xa588 0x00030000
    #  WLAN priority masks
    #  WLAN TX
    # For wlan data (e.g. VoIP) the 0xa590 should be programmed to prioritize data types high (0x40404044)
    wlanconfig $ethx wrmac 0xa590 0x40404044
    #wlanconfig $ethx wrmac 0xa590 0x00111111
    wlanconfig $ethx wrmac 0xa594 0x00111333
    #  WLAN RX
    wlanconfig $ethx wrmac 0xa598 0x00111111
    wlanconfig $ethx wrmac 0xa59c 0x00111333
    #  WLAN TX FW 
    wlanconfig $ethx wrmac 0xa5e4 0x00111111
    wlanconfig $ethx wrmac 0xa5e8 0x00111333
    #
    #  BCA Timer register (default settings)
    #  (set with 25ns resolution)
    wlanconfig $ethx wrmac 0xa5ac 0x000000c8
    wlanconfig $ethx wrmac 0xa5b0 0x00000320 
    wlanconfig $ethx wrmac 0xa5a8 0x00000708
    wlanconfig $ethx wrmac 0xa5a4 0x00000c80
    wlanconfig $ethx wrmac 0xa5b4 0x00000c80
    wlanconfig $ethx wrmac 0xa5b8 0x000052d0
    wlanconfig $ethx wrmac 0xa5bc 0x00000258
    wlanconfig $ethx wrmac 0xa5c0 0x00000ed8
    #
    echo ">>> timesharing <<<"
    wlanconfig $ethx bca-ts set 1 60 30
    wlanconfig $ethx bca-ts set 0 20 10

    #echo ">>> 3w BCA configured <<<"
    #echo

    #echo ">>> inactive timeout <<<"
    iwpriv $ethx inactivityto 20

    #echo ">>> set power xxxxxxx <<<"
    wlanconfig $ethx hostcmd /etc/hostcmd.conf pa_cfg_ext_set

    #Enable pull down on the BT_PRIORITY port in order to let wlan work when BT is powered down
    #BT is tri-stating the signal when powered down.
    #Bit 7: Set to 1 for pull down on BT_PRIORITY and BT_STATE
    wlanconfig $ethx wrmac 0x2048 0x74600880

    #Use external 32kHz clock for sleep, saving standby current. This shall be done prior to association
    #otherwise the setting will not have any effect.
    #“wlanconfig ethX sleepparams set p1 p2 p3 p4 p5 p6”
    #P1= sleep clock error in ppm. 60ppm from Atlas + contributions from HW variations. BT requirements is 200ppm, so this is used.
    #P2= wake offset in usec (device ready before TBTT, default 500usec)
    #P3= ref clock stabilization time in usec (default 4 msec)
    #P4= periodic calibration (1 enable, 2 disable, not needed for accurate external sleep clock)
    #P5= control of external sleep clock (1 = internal, 2 = external)
    #P6= reserved, Use whatever value you desire. It does not matter
    wlanconfig $ethx sleepparams set 200 500 4000 2 2 524

    #echo ">>> enable RX abort feature <<<"
    wlanconfig $ethx wrbbp 0x78 0x2
    wlanconfig $ethx wrbbp 0x79 0x0
    wlanconfig $ethx wrbbp 0xAC 0xD9
    wlanconfig $ethx wrbbp 0x34 0x6E
    
    
    #echo ">>> driver version <<<"
    iwpriv $ethx version

fi 

exit
