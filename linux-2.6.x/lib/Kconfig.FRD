#
# Fast Real-Time Domain Simulation (C) 2005 MontaVista Software, Inc.
#
#

menu "Fast Real-Time Domain"

config FRD
	bool "Enable Realtime Simulation Threads"
	select PROC_FS
	default n
	help
	  This option enables a Fast Realtime simulation,
	  where several high priority RT-threads interact
	  with an interrupt handler in a time-constrained
	  environment

config FRD_THREADS
	int "Number of real-time threads to run"
	depends on FRD
	range 3 40
	default 3
	help
	  Select the number of FRD threads to create



menu "Fast Real-Time Domain Advanced Options"

config FRD_TEST_ITERATIONS
	int "Number of test iterations to execute (0 for infinite)"
	depends on FRD
	default 0
	help
	  This option allows you to select the number of iterations
	  that the FRD threads will perform while collecting data. 
	  The actual execution time can be calculated from this setting
	  and the frequency of the interrupt source.


config FRD_PACING
	int "Pacing: Number of timer events between activations"
	depends on FRD
	default 0
	help
	  This option throttles the operation of FRD, for example
	  to allow debug output to be printed to the screen between 
	  activations. Assuming the timer period is 1 ms, pacing of 500 
	  would result in thread activations every 1/2 sec. 

config FRD_DELAY
	int "Startup delay: number of seconds before FRD startup"
	depends on FRD
	default 60 
	default 0
	help
	  This delay allows the kernel and system to fully boot before
	  measurement data logging begins. 


config FRD_WAKE_ALL
	bool "Wake ALL threads from IRQ handler"
	depends on FRD
	default n
	help
	  This option causes the interrupt handler to schedule all threads 
	  at the same time.  It can be used to verify proper task sequencing 
	  by the scheduler, corresponding to the thread priority sequence 
	  set below.


choice
	prompt "FRD thread priorities"
	depends on FRD
	default FRD_DESCENDING_PRIO
	help
	  Threads are woken up by ascending thread ids. Thread[0] is
	  woken up first. If the next thread ID is higher priority,
	  thread 0 will be preempted when it attemptst to wake up
	  thread 1. If the next thread ID is lower priority, a yield()
	  will take place instead, after thread 0 completes.

config FRD_ASCENDING_PRIO
	bool "Higher thread ids have higher priority (forced preemption)"
	depends on FRD
	help
	  This setting forces a lower priority thread to wake up a higher 
	  priority thread. Immediate preemption takes place, and additional 
	  scheduling overhead is incurred.

	  Choose this option to make frd[0] lowest priority. 
	  Thread frd[0] is woken from the IRQ, and then wakes
	  thread frd[1]. Since frd[1] is higher priority, the 
	  context switch occurs as soon as frd[1] has been woken.

config FRD_DESCENDING_PRIO
	bool "Higher thread ids have lower priority"
	depends on FRD
	help
	  This setting forces a higher priority thread to wake up a lower 
	  priority thread. The higher priority thread should complete 
	  without interruption before the lower priority thread runs. 

	  Choose this option to make frd[0] highest priority.
	  Thread frd[0] is woken from the IRQ, and then wakes
	  thread frd[1]. The context switch does not occur
	  until frd[0] has finished running.

config FRD_EQUAL_PRIO
	bool "All threads are highest priority"
	depends on FRD
	help
	  Choose this option to make all FRD threads highest priority. 
	  All threads compete for the CPU, and execution commences in 
	  the wake-up order. This option is not useful for measurements, 
	  but can be used to characterize scheduler behavior and is offered 
	  for completeness.

endchoice

config FRD_USE_TIMER_IRQ
	bool "Use the OS timer IRQ for thread wake-up"
	depends on FRD
	default y
	help
	  FRD depends on a hardware interrupt handler to mark the event 
	  which wakes up the threads. By default, the timer interrupt 
	  is used on all systems. The FRD hook for the default timer 
	  interrupt is found in kernel/timer.c. 
	  The following code must be added to use a dedicated IRQ other 
	  than the OS timer IRQ: 


          #if !defined CONFIG_FRD_USE_TIMER_IRQ
            if (check_frd_func_ptr)
                    check_frd_func_ptr();
          #endif
	
	  The dedicated IRQ must run with SA_NODELAY and SA_INTERRUPT.

	  Say Y if unsure.

config FRD_BUCKET_SIZE
	int "The size of bucket to use log real time thread latency"
	depends on FRD
	range 1 50
	default 2
	help
	  Histogram data is stored for a preemption latency data interval 
	  of (0,10000) microseconds. Smaller bucket size provides a 
	  higher resolution histogram but uses more memory. 

endmenu
endmenu
