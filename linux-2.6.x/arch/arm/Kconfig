#
# Copyright (C) 2004-2007 Motorola, Inc.
#
# This Program is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTIBILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.                                                                          
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General
# Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at
# your option) any later version.  You should have
# received a copy of the GNU General Public License
# along with this program; if not, write to the Free
# Software Foundation, Inc., 675 Mass Ave,
# Cambridge, MA 02139, USA
#
# Changelog:
# Date               Author           Comment
# -----------------------------------------------------------------------------
# 12/14/2004         Motorola         Integrate MV Drop code
# 02/25/2005         Motorola         Integrate MV Drop code
# 04/05/2005         Motorola         Integrate MV Drop code
# 05/12/2005         Motorola         Integrate MV Drop code
# 06/24/2005         Motorola         Integrate MV Drop code
# 09/15/2005         Motorola         Integrate MV Drop code
# 11/11/2005         Motorola         Pull in the MVista 051028 drop into vobs
# 01/05/2006         Motorola         Pull in the MVista 051219 drop into vobs
# 07/15/2006         Motorola         Pull in the MVista 060512 drop into vobs
# 11/09/2006         Motorola         Replace source "drivers/cap_touch/Kconfig" with source "drivers/keyv/Kconfig"
# 12/02/2006         Motorola         Add source "arch/arm/Kconfig.wfn"
# 07/02/2007         Motorola         Add comments.
# 08/18/2007         Motorola         Add comments.
# 10/15/2007         Motorola         FIQ related modified.
#
# For a description of the syntax of this configuration file,
# see Documentation/kbuild/kconfig-language.txt.
#

mainmenu "Linux Kernel Configuration"

source "arch/arm/Kconfig.mot"

source "arch/arm/Kconfig.wfn"

config ARM
	bool
	default y
	help
	  The ARM series is a line of low-power-consumption RISC chip designs
	  licensed by ARM ltd and targeted at embedded applications and
	  handhelds such as the Compaq IPAQ.  ARM-based PCs are no longer
	  manufactured, but  legacy ARM-based PC hardware remains popular in
	  Europe.  There is an ARM Linux project with a web page at
	  <http://www.arm.linux.org.uk/>.

config MMU
	bool
	default y

config EISA
	bool
	---help---
	  The Extended Industry Standard Architecture (EISA) bus was
	  developed as an open alternative to the IBM MicroChannel bus.

	  The EISA bus provided some of the features of the IBM MicroChannel
	  bus while maintaining backward compatibility with cards made for
	  the older ISA bus.  The EISA bus saw limited use between 1988 and
	  1995 when it was made obsolete by the PCI bus.

	  Say Y here if you are building a kernel for an EISA-based machine.

	  Otherwise, say N.

config SBUS
	bool

config MCA
	bool
	help
	  MicroChannel Architecture is found in some IBM PS/2 machines and
	  laptops.  It is a bus system similar to PCI or ISA. See
	  <file:Documentation/mca.txt> (and especially the web page given
	  there) before attempting to build an MCA bus kernel.

config UID16
	bool
	default y

config RWSEM_XCHGADD_ALGORITHM
	bool

config GENERIC_BUST_SPINLOCK
	bool

config GENERIC_ISA_DMA
	bool

config GENERIC_IOMAP
	bool
	default y

source "init/Kconfig"

menu "System type and features"

choice
	prompt "ARM system type"
	default ARCH_RPC

config ARCH_CLPS7500
	bool "Cirrus-CL-PS7500FE"

config ARCH_CLPS711X
	bool "CLPS711x/EP721x-based"

config ARCH_CO285
	bool "Co-EBSA285"
	select FOOTBRIDGE
	select FOOTBRIDGE_ADDIN

config ARCH_EBSA110
	bool "EBSA-110"
	help
	  This is an evaluation board for the StrongARM processor available
	  from Digital. It has limited hardware on-board, including an onboard
	  Ethernet interface, two PCMCIA sockets, two serial ports and a
	  parallel port.

config ARCH_CAMELOT
	bool "Epxa10db"
	help
	  This enables support for Altera's Excalibur XA10 development board.
	  If you would like to build your kernel to run on one of these boards
	  then you must say 'Y' here. Otherwise say 'N'

config ARCH_FOOTBRIDGE
	bool "FootBridge"
	select FOOTBRIDGE

config ARCH_INTEGRATOR
	bool "Integrator"

config ARCH_MXC
	bool "Freescale MXC/iMX-based"

config ARCH_IOP3XX
	bool "IOP3xx-based"

config ARCH_IXP4XX
	bool "IXP4xx-based"

config ARCH_IXP2000
	bool "IXP2400/2800-based"

config ARCH_L7200
	bool "LinkUp-L7200"
	help
	  Say Y here if you intend to run this kernel on a LinkUp Systems
	  L7200 Software Development Board which uses an ARM720T processor.
	  Information on this board can be obtained at:

	  <http://www.linkupsys.com/>

	  If you have any questions or comments about the Linux kernel port
	  to this board, send e-mail to sjhill@cotw.com.

config ARCH_PXA
	bool "PXA2xx-based"

config ARCH_RPC
	bool "RiscPC"
	help
	  On the Acorn Risc-PC, Linux can support the internal IDE disk and
	  CD-ROM interface, serial and parallel port, and the floppy drive.

config ARCH_SA1100
	bool "SA1100-based"

config ARCH_S3C2410
	bool "Samsung S3C2410"
	help
	  Samsung S3C2410X CPU based systems, such as the Simtec Electronics
	  BAST (http://www.simtec.co.uk/products/EB110ITX/), the IPAQ 1940 or
	  the Samsung SMDK2410 development board (and derviatives).

config ARCH_SHARK
	bool "Shark"

config ARCH_LH7A40X
	bool "Sharp LH7A40X"
	help
	  Say Y here for systems based on one of the Sharp LH7A40X
	  System on a Chip processors.  These CPUs include an ARM922T
	  core with a wide array of integrated devices for
	  hand-held and low-power applications.

config ARCH_OMAP
	bool "TI OMAP"

config ARCH_VERSATILE
	bool "Versatile"
	help
	  This enables support for ARM Ltd Versatile board.

config ARCH_IMX
	bool "IMX"

config ARCH_H720X
	bool "Hynix-HMS720x-based"
	help
	  This enables support for systems based on the Hynix HMS720x

config ARCH_PNX4008
	bool "Philips PNX4008 mobile"
	help
	  Say Y here if this kernel is for PNX4008 mobile platform.

endchoice

source "arch/arm/mach-clps711x/Kconfig"

source "arch/arm/mach-epxa10db/Kconfig"

source "arch/arm/mach-footbridge/Kconfig"

source "arch/arm/mach-integrator/Kconfig"

source "arch/arm/mach-iop3xx/Kconfig"

source "arch/arm/mach-ixp4xx/Kconfig"

source "arch/arm/mach-ixp2000/Kconfig"

source "arch/arm/mach-pxa/Kconfig"

source "arch/arm/mach-sa1100/Kconfig"

source "arch/arm/mach-omap/Kconfig"

source "arch/arm/mach-s3c2410/Kconfig"

source "arch/arm/mach-lh7a40x/Kconfig"

source "arch/arm/mach-imx/Kconfig"

source "arch/arm/mach-h720x/Kconfig"

source "arch/arm/mach-versatile/Kconfig"

source "arch/arm/plat-mxc/Kconfig"

source "arch/arm/mach-pnx4008/Kconfig"

# Definitions to make life easier
config ARCH_ACORN
	bool
	depends on ARCH_RPC
	default y

config TIMER_ACORN
	bool
	depends on ARCH_ACORN || ARCH_CLPS7500
	default y

#####################################################################
# SA1111 support
config SA1111
	bool
	depends on ASSABET_NEPONSET || SA1100_ADSBITSY || SA1100_BADGE4 || SA1100_CONSUS || SA1100_GRAPHICSMASTER || SA1100_JORNADA720 || ARCH_LUBBOCK || SA1100_PFS168 || SA1100_PT_SYSTEM3 || SA1100_XP860
	default y

config SHARP_LOCOMO
	bool
	depends on SA1100_COLLIE
	default y

config SHARP_SCOOP
	bool
	depends on PXA_SHARPSL
	default y

config FORCE_MAX_ZONEORDER
	int
	depends on SA1111
	default "9"

config DMABOUNCE
	bool
	depends on SA1111 || ARCH_IXP4XX
	default y

source arch/arm/mm/Kconfig

#  bool 'Use XScale PMU as timer source' CONFIG_XSCALE_PMU_TIMER
config XSCALE_PMU
	bool
	depends on CPU_XSCALE && !XSCALE_PMU_TIMER
	default y

# Select various configuration options depending on the machine type

config SMP
	bool "Symmetric Multi-Processing (EXPERIMENTAL)"
	depends on EXPERIMENTAL && n
	help
	  This enables support for systems with more than one CPU. If you have
	  a system with only one CPU, like most personal computers, say N. If
	  you have a system with more than one CPU, say Y.

	  If you say N here, the kernel will run on single and multiprocessor
	  machines, but will use only one CPU of a multiprocessor machine. If
	  you say Y here, the kernel will run on many, but not all, single
	  processor machines. On a single processor machine, the kernel will
	  run faster if you say N here.

	  See also the <file:Documentation/smp.tex>,
	  <file:Documentation/smp.txt>, <file:Documentation/i386/IO-APIC.txt>,
	  <file:Documentation/nmi_watchdog.txt> and the SMP-HOWTO available at
	  <http://www.linuxdoc.org/docs.html#howto>.

	  If you don't know what to do here, say N.

config NR_CPUS
	int "Maximum number of CPUs (2-32)"
	depends on SMP
	default "4"

config AEABI
	bool "Use the ARM EABI to compile the kernel"
	help
	  This option allows for the kernel to be compiled using the latest
	  ARM ABI (aka EABI).  This is only useful if you are using a user
	  space environment that is also compiled with EABI.

	  Since there are major incompatibilities between the legacy ABI and
	  EABI, especially with regard to structure member alignment, this
	  option also changes the kernel syscall calling convention to
	  disambiguate both ABIs and allow for backward compatibility support
	  (selected with CONFIG_OABI_COMPAT).

	  To use this you need GCC version 4.0.0 or later.

config OABI_COMPAT
	bool "Allow old ABI binaries to run with this kernel (EXPERIMENTAL)"
	depends on AEABI && EXPERIMENTAL
	default y
	help
	  This option preserves the old syscall interface along with the
	  new (ARM EABI) one. It also provides a compatibility layer to
	  intercept syscalls that have structure arguments which layout
	  in memory differs between the legacy ABI and the new ARM EABI
	  (only for non "thumb" binaries). This option adds a tiny
	  overhead to all syscalls and produces a slightly larger kernel.
	  If you know you'll be using only pure EABI user space then you
	  can say N here. If this option is not selected and you attempt
	  to execute a legacy ABI binary then the result will be
	  UNPREDICTABLE (in fact it can be predicted that it won't work
	  at all). If in doubt say Y.

config DISCONTIGMEM
	bool "Discontiguous Memory support"
	default y if ARCH_EDB7211 || ARCH_SA1100 || (ARCH_LH7A40X && !LH7A40X_CONTIGMEM)
	help
	  Say Y to support efficient handling of discontiguous physical memory,
	  for architectures which are either NUMA (Non-Uniform Memory Access)
	  or have huge holes in the physical address space for other reasons.
	  See <file:Documentation/vm/numa> for more.

config NUMA
        bool "NUMA Support"
        depends on DISCONTIGMEM
        help
	  Say Y to compile the kernel to support NUMA (Non-Uniform Memory
	  Access).  Although this option is normally for configuring
	  high-end multiprocessor server machines, it can also be used
	  on UP machines with discontiguous memory to make use of NUMA
	  memory allocation policies (a.k.a. "Memory Type Based
	  Allocation"). If in doubt, say N.

# Now handle the bus types
config PCI
	bool "PCI support" if ARCH_INTEGRATOR_AP
	default y if ARCH_SHARK || FOOTBRIDGE_HOST || ARCH_IOP3XX || ARCH_IXP4XX || ARCH_IXP2000
	help
	  Find out whether you have a PCI motherboard. PCI is the name of a
	  bus system, i.e. the way the CPU talks to the other stuff inside
	  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
	  VESA. If you have PCI, say Y, otherwise N.

	  The PCI-HOWTO, available from
	  <http://www.tldp.org/docs.html#howto>, contains valuable
	  information about which PCI hardware does work under Linux and which
	  doesn't.

# Select the host bridge type
config PCI_HOST_VIA82C505
	bool
	depends on PCI && ARCH_SHARK
	default y

config ICST525
	bool
	depends on ARCH_INTEGRATOR
	default y

config ICST307
	bool
	depends on ARCH_VERSATILE
	default y

config ARM_AMBA
	bool
	depends on ARCH_INTEGRATOR || ARCH_VERSATILE || ARCH_PNX4008
	default y

config ISA
	bool
	depends on FOOTBRIDGE_HOST || ARCH_SHARK || ARCH_CLPS7500 || ARCH_EBSA110 || ARCH_CDB89712 || ARCH_EDB7211 || ARCH_SA1100 || ARCH_MX1ADS || ARCH_MXC
	default y
	help
	  Find out whether you have ISA slots on your motherboard.  ISA is the
	  name of a bus system, i.e. the way the CPU talks to the other stuff
	  inside your box.  Other bus systems are PCI, EISA, MicroChannel
	  (MCA) or VESA.  ISA is an older system, now being displaced by PCI;
	  newer boards don't support it.  If you have ISA, say Y, otherwise N.

config ISA_DMA
	bool
	depends on FOOTBRIDGE_HOST || ARCH_SHARK
	default y

config FIQ
	bool
	depends on ARCH_ACORN || ARCH_L7200 || ARCH_MXC91231
	default y

# Compressed boot loader in ROM.  Yes, we really want to ask about
# TEXT and BSS so we preserve their values in the config files.
config ZBOOT_ROM_TEXT
	hex "Compressed ROM boot loader base address"
	default "0"
	help
	  The physical address at which the ROM-able zImage is to be
	  placed in the target.  Platforms which normally make use of
	  ROM-able zImage formats normally set this to a suitable
	  value in their defconfig file.

	  If ZBOOT_ROM is not enabled, this has no effect.

config ZBOOT_ROM_BSS
	hex "Compressed ROM boot loader BSS address"
	default "0"
	help
	  The base address of 64KiB of read/write memory in the target
	  for the ROM-able zImage, which must be available while the
	  decompressor is running.  Platforms which normally make use of
	  ROM-able zImage formats normally set this to a suitable
	  value in their defconfig file.

	  If ZBOOT_ROM is not enabled, this has no effect.

config ZBOOT_ROM
	bool "Compressed boot loader in ROM/flash"
	depends on ZBOOT_ROM_TEXT != ZBOOT_ROM_BSS
	help
	  Say Y here if you intend to execute your compressed kernel image
	  (zImage) directly from ROM or flash.  If unsure, say N.

config XIP_KERNEL
	bool "Kernel Execute-In-Place from ROM"
	depends on !ZBOOT_ROM
	help
	  Execute-In-Place allows the kernel to run from non-volatile storage
	  directly addressable by the CPU, such as NOR flash. This saves RAM
	  space since the text section of the kernel is not loaded from flash
	  to RAM.  Read-write sections, such as the data section and stack,
	  are still copied to RAM.  The XIP kernel is not compressed since
	  it has to run directly from flash, so it will take more space to
	  store it.  The flash address used to link the kernel object files,
	  and for storing it, is configuration dependent. Therefore, if you
	  say Y here, you must know the proper physical address where to
	  store the kernel image depending on your own flash memory usage.

	  Also note that the make target becomes "make xipImage" rather than
	  "make zImage" or "make Image".  The final kernel binary to put in
	  ROM memory will be arch/arm/boot/xipImage.

	  If unsure, say N.

config XIP_PHYS_ADDR
	hex "XIP Kernel Physical Location"
	depends on XIP_KERNEL
	default "0x00080000"
	help
	  This is the physical address in your flash memory the kernel will
	  be linked for and stored to.  This address is dependent on your
	  own flash usage.

config HIGH_RES_TIMERS
	bool "Configure High-Resolution-Timers"
	help
	  POSIX timers are available by default.  This option enables
	  high-resolution POSIX timers.  With this option the resolution
	  is about 10 microsecond.  High resolution is not free.  If
	  enabled this option will add a small overhead each time a
	  timer expires that is not on a 1/HZ tick boundary.  If no such
	  timers are used the overhead is nil.

	  This option enables two additional POSIX CLOCKS,
	  CLOCK_REALTIME_HR and CLOCK_MONOTONIC_HR.  Note that this
	  option does not change the resolution of CLOCK_REALTIME or
	  CLOCK_MONOTONIC which remain at 1/HZ resolution.

config VST
	bool "Provide Variable idle Sleep Time"
	depends on HIGH_RES_TIMERS
	help

	  CONFIG_VST: This option causes a scan of the timer list when
	  ever the system is about to go idle.  If no "immediate" timers
	  are pending, the tick interrupt is turned off and an interrupt
	  is scheduled for when the next timer expires.  Thus an idle
	  system is not interrupted by useless timer ticks.  The
	  definition of "immediate" and other useful information is
	  available at /proc/sys/kernel/vst.

	  The system boots with VST enabled and it can be disabled by:
	  "echo 0 > /proc/sys/kernel/vst/enable".

config VST_STATS
	bool "Provide VST timer info via /proc"
	depends on VST && PROC_FS
	help

	  CONFIG_VST_STATS: This option turns on code that collects
	  information in a circular buffer on timers which are incurred
	  while entering, or attempting to enter the VST state.  This
	  information is useful if you are trying to figure out why the
	  system is not entering the VST state.  See
	  Documentation/vst.txt for more information on what is
	  displayed and how to interpret the information.  Say NO here
	  unless you are trying to optimize VST entry.

config IDLE
	bool "Provide IDLE call back functions"
	help

	  CONFIG_IDLE: This option provides the IDLE notify facility.
	  Registered functions will be called when ever the system is
	  about to go idle and when the system exits the idle task.  It
	  is expected that callers may change timers and other such
	  things so as to more fully use the VST capability (see above).

	  The system boots with IDLE notify disabled.  It can be enabled
	  by "echo 1 > /proc/sys/kernel/idle/enable".  Other information
	  is also available at /proc/sys/kernel/idle/*.

	  This capability does not affect the system unless it is
	  enabled AND one or more functions have registered to be
	  called.

if (ARCH_SA1100 || ARCH_INTEGRATOR || ARCH_MXC)

source "drivers/cpufreq/Kconfig"

config CPU_FREQ_SA1100
	bool
	depends on CPU_FREQ && (SA1100_LART || SA1100_PLEB)
	default y

config CPU_FREQ_SA1110
	bool
	depends on CPU_FREQ && (SA1100_ASSABET || SA1100_CERF || SA1100_PT_SYSTEM3)
	default y

config CPU_FREQ_INTEGRATOR
	tristate "CPUfreq driver for ARM Integrator CPUs"
	depends on ARCH_INTEGRATOR && ICST525 && CPU_FREQ
	default y
	help
	  This enables the CPUfreq driver for ARM Integrator CPUs.

	  For details, take a look at <file:Documentation/cpu-freq>.

	  If in doubt, say Y.

endif

source "drivers/pci/Kconfig"

source "drivers/pcmcia/Kconfig"

comment "At least one math emulation must be selected"

config FPE_NWFPE
	bool "NWFPE math emulation"
	depends on !AEABI || OABI_COMPAT
	---help---
	  Say Y to include the NWFPE floating point emulator in the kernel.
	  This is necessary to run most binaries. Linux does not currently
	  support floating point hardware so you need to say Y here even if
	  your machine has an FPA or floating point co-processor podule.

	  You may say N here if you are going to load the Acorn FPEmulator
	  early in the bootup.

config FPE_NWFPE_XP
	bool "Support extended precision"
	depends on FPE_NWFPE && !CPU_BIG_ENDIAN
	help
	  Say Y to include 80-bit support in the kernel floating-point
	  emulator.  Otherwise, only 32 and 64-bit support is compiled in.
	  Note that gcc does not generate 80-bit operations by default,
	  so in most cases this option only enlarges the size of the
	  floating point emulator without any good reason.

	  You almost surely want to say N here.

config FPE_FASTFPE
	bool "FastFPE math emulation (EXPERIMENTAL)"
	depends on (!AEABI || OABI_COMPAT) && !CPU_32v3 && EXPERIMENTAL
	---help---
	  Say Y here to include the FAST floating point emulator in the kernel.
	  This is an experimental much faster emulator which now also has full
	  precision for the mantissa.  It does not support any exceptions.
	  It is very simple, and approximately 3-6 times faster than NWFPE.

	  It should be sufficient for most programs.  It may be not suitable
	  for scientific calculations, but you have to check this for yourself.
	  If you do not feel you need a faster FP emulation you should better
	  choose NWFPE.

config VFP
	bool "VFP-format floating point maths"
	depends on CPU_V6 || CPU_ARM926T
	help
	  Say Y to include VFP support code in the kernel. This is needed
	  if your hardware includes a VFP unit.

	  Please see <file:Documentation/arm/VFP/release-notes.txt> for
	  release notes and additional status information.

	  Say N if your target does not have VFP hardware.

source "fs/Kconfig.binfmt"

source "lib/Kconfig.RT"

config RWSEM_GENERIC_SPINLOCK
	bool
	default y

config ASM_SEMAPHORES
	bool
	default y

config RWSEM_XCHGADD_ALGORITHM
	bool
	depends on !RWSEM_GENERIC_SPINLOCK && !PREEMPT_RT
	default y

menu "Power management options (PM, DPM, ACPI, APM)"

config PM
	bool "Power Management support"
	---help---
	  "Power Management" means that parts of your computer are shut
	  off or put into a power conserving "sleep" mode if they are not
	  being used.  There are two competing standards for doing this: APM
	  and ACPI.  If you want to use either one, say Y here and then also
	  to the requisite support below.

	  Power Management is most important for battery powered laptop
	  computers; if you have a laptop, check out the Linux Laptop home
	  page on the WWW at <http://www.linux-on-laptops.com/> or
	  Tuxmobil - Linux on Mobile Computers at <http://www.tuxmobil.org/>
	  and the Battery Powered Linux mini-HOWTO, available from
	  <http://www.tldp.org/docs.html#howto>.

	  Note that, even if you say N here, Linux on the x86 architecture
	  will issue the hlt instruction if nothing is to be done, thereby
	  sending the processor to sleep and saving power.

config APM
	tristate "Advanced Power Management Emulation"
	depends on PM
	---help---
	  APM is a BIOS specification for saving power using several different
	  techniques. This is mostly useful for battery powered laptops with
	  APM compliant BIOSes. If you say Y here, the system time will be
	  reset after a RESUME operation, the /proc/apm device will provide
	  battery status information, and user-space programs will receive
	  notification of APM "events" (e.g. battery status change).

	  If you select "Y" here, you can disable actual use of the APM
	  BIOS by passing the "apm=off" option to the kernel at boot time.

	  Note that the APM support is almost completely disabled for
	  machines with more than one CPU.

	  In order to use APM, you will need supporting software. For location
	  and more information, read <file:Documentation/pm.txt> and the
	  Battery Powered Linux mini-HOWTO, available from
	  <http://www.tldp.org/docs.html#howto>.

	  This driver does not spin down disk drives (see the hdparm(8)
	  manpage ("man 8 hdparm") for that), and it doesn't turn off
	  VESA-compliant "green" monitors.

	  This driver does not support the TI 4000M TravelMate and the ACER
	  486/DX4/75 because they don't have compliant BIOSes. Many "green"
	  desktop machines also don't have compliant BIOSes, and this driver
	  may cause those machines to panic during the boot phase.

	  Generally, if you don't have a battery in your machine, there isn't
	  much point in using this driver and you should say N. If you get
	  random kernel OOPSes or reboots that don't seem to be related to
	  anything, try disabling/enabling this option (or disabling/enabling
	  APM in your BIOS).

	  Some other things you should try when experiencing seemingly random,
	  "weird" problems:

	  1) make sure that you have enough swap space and that it is
	  enabled.
	  2) pass the "no-hlt" option to the kernel
	  3) switch on floating point emulation in the kernel and pass
	  the "no387" option to the kernel
	  4) pass the "floppy=nodma" option to the kernel
	  5) pass the "mem=4M" option to the kernel (thereby disabling
	  all but the first 4 MB of RAM)
	  6) make sure that the CPU is not over clocked.
	  7) read the sig11 FAQ at <http://www.bitwizard.nl/sig11/>
	  8) disable the cache from your BIOS settings
	  9) install a fan for the video card or exchange video RAM
	  10) install a better fan for the CPU
	  11) exchange RAM chips
	  12) exchange the motherboard.

	  To compile this driver as a module, choose M here: the
	  module will be called apm.

config SUSPEND_REMOUNTFS
	bool "Remount filesystem read-only during suspend"
	depends on PM
	default n
	help
	  Remount all writeable filesystems read-only while the system is
	  placed into a suspend state, flushing buffers and marking
	  filesystems clean, in case power is cycled during the suspend
	  interval.

source "drivers/dpm/Kconfig"

endmenu

source "drivers/evb/Kconfig"

config ARTHUR
	tristate "RISC OS personality"
	depends on CPU_32 && !AEABI
	help
	  Say Y here to include the kernel code necessary if you want to run
	  Acorn RISC OS/Arthur binaries under Linux. This code is still very
	  experimental; if this sounds frightening, say N and sleep in peace.
	  You can also say M here to compile this support as a module (which
	  will be called arthur).

config CMDLINE
	string "Default kernel command string"
	default ""
	help
	  On some architectures (EBSA110 and CATS), there is currently no way
	  for the boot loader to pass arguments to the kernel. For these
	  architectures, you should supply some command-line options at build
	  time by entering them here. As a minimum, you should specify the
	  memory size and the root device (e.g., mem=64M root=/dev/nfs).

config LEDS
	bool "Timer and CPU usage LEDs"
	depends on ARCH_NETWINDER || ARCH_EBSA110 || ARCH_EBSA285 || ARCH_SHARK || ARCH_CO285 || ARCH_SA1100 || ARCH_LUBBOCK || MACH_MAINSTONE || ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_CDB89712 || ARCH_P720T || ARCH_OMAP || ARCH_VERSATILE || ARCH_IMX
	help
	  If you say Y here, the LEDs on your machine will be used
	  to provide useful information about your current system status.

	  If you are compiling a kernel for a NetWinder or EBSA-285, you will
	  be able to select which LEDs are active using the options below. If
	  you are compiling a kernel for the EBSA-110 or the LART however, the
	  red LED will simply flash regularly to indicate that the system is
	  still functional. It is safe to say Y here if you have a CATS
	  system, but the driver will do nothing.

config LEDS_TIMER
	bool "Timer LED" if LEDS && (ARCH_NETWINDER || ARCH_EBSA285 || ARCH_SHARK || MACH_MAINSTONE || ARCH_CO285 || ARCH_SA1100 || ARCH_LUBBOCK || ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_P720T || ARCH_VERSATILE || ARCH_IMX || MACH_OMAP_H2 || MACH_OMAP_PERSEUS2)
	depends on ARCH_NETWINDER || ARCH_EBSA110 || ARCH_EBSA285 || ARCH_SHARK || ARCH_CO285 || ARCH_SA1100 || ARCH_LUBBOCK || MACH_MAINSTONE || ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_CDB89712 || ARCH_P720T || ARCH_OMAP || ARCH_VERSATILE || ARCH_IMX
	default y if ARCH_EBSA110
	help
	  If you say Y here, one of the system LEDs (the green one on the
	  NetWinder, the amber one on the EBSA285, or the red one on the LART)
	  will flash regularly to indicate that the system is still
	  operational. This is mainly useful to kernel hackers who are
	  debugging unstable kernels.

	  The LART uses the same LED for both Timer LED and CPU usage LED
	  functions. You may choose to use both, but the Timer LED function
	  will overrule the CPU usage LED.

config LEDS_CPU
	bool "CPU usage LED"
	depends on LEDS && (ARCH_NETWINDER || ARCH_EBSA285 || ARCH_SHARK || ARCH_CO285 || ARCH_SA1100 || ARCH_LUBBOCK || MACH_MAINSTONE || ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_P720T || ARCH_VERSATILE || ARCH_IMX || MACH_OMAP_H2 || MACH_OMAP_PERSEUS2)
	help
	  If you say Y here, the red LED will be used to give a good real
	  time indication of CPU usage, by lighting whenever the idle task
	  is not currently executing.

	  The LART uses the same LED for both Timer LED and CPU usage LED
	  functions. You may choose to use both, but the Timer LED function
	  will overrule the CPU usage LED.

config ALIGNMENT_TRAP
	bool
	depends on CPU_32
	default y if !ARCH_EBSA110
	help
	  ARM processors can not fetch/store information which is not
	  naturally aligned on the bus, i.e., a 4 byte fetch must start at an
	  address divisible by 4. On 32-bit ARM processors, these non-aligned
	  fetch/store instructions will be emulated in software if you say
	  here, which has a severe performance impact. This is necessary for
	  correct operation of some network protocols. With an IP-only
	  configuration it is safe to say N, otherwise say Y.

endmenu

menu "Device Drivers"

source "drivers/base/Kconfig"

source "drivers/parport/Kconfig"

if ALIGNMENT_TRAP
source "drivers/mtd/Kconfig"
endif

source "drivers/pnp/Kconfig"

source "drivers/block/Kconfig"

source "drivers/md/Kconfig"

source "drivers/acorn/block/Kconfig"

source "net/Kconfig"

if ARCH_CLPS7500 || ARCH_IOP3XX || ARCH_IXP4XX || ARCH_L7200 || ARCH_LH7A40X || ARCH_PXA || ARCH_RPC || ARCH_S3C2410 || ARCH_SA1100 || ARCH_SHARK || FOOTBRIDGE || ARCH_MX3
source "drivers/ide/Kconfig"
endif

source "drivers/scsi/Kconfig"

source "drivers/message/fusion/Kconfig"

source "drivers/ieee1394/Kconfig"

source "drivers/message/i2o/Kconfig"

source "drivers/isdn/Kconfig"

#
# input before char - char/joystick depends on it. As does USB.
#
source "drivers/input/Kconfig"

source "drivers/char/Kconfig"

source "drivers/i2c/Kconfig"

source "drivers/spi/Kconfig"

source "drivers/w1/Kconfig"

#source "drivers/l3/Kconfig"

source "fs/Kconfig"

source "arch/arm/oprofile/Kconfig"

source "drivers/video/Kconfig"

source "drivers/media/Kconfig"

source "sound/Kconfig"

source "drivers/misc/Kconfig"

source "drivers/usb/Kconfig"

source "drivers/otg/Kconfig"

source "drivers/ssi/Kconfig"

source "drivers/mmc/Kconfig"

source "drivers/profiler/Kconfig"

source "drivers/power_ic/Kconfig"

source "drivers/keyv/Kconfig"

source "drivers/aplogger/Kconfig"

source "drivers/sim/Kconfig"

endmenu

source "ktools/Kconfig"

source "arch/arm/Kconfig.debug"

source "security/Kconfig"

source "crypto/Kconfig"

source "lib/Kconfig"

source "drivers/mxc/Kconfig"

