#
# This file is derived from the Linux kernel's scripts/Makefile.modpost file.
#
# Copyright 2006-2007 Motorola
#
# Motorola  2006-Nov-13 - Adapted for clearmake-compliant build of external
#                         modules.
# Motorola  2007-Jan-25 - Fixed a bug with the number of arguments that were
#                         being passed to modpost.

# ===========================================================================
# Module versions
# ===========================================================================
#
# Stage one of module building created the following:
# a) The individual .o files used for the module
# b) A <module>.o file wich is the .o files above linked together
# c) A <module>.mod file in $(MODVERDIR)/, listing the name of the
#    the preliminary <module>.o file, plus all .o files

# Stage 2 is handled by this file and does the following
# 1) Find all modules from the files listed in $(MODVERDIR)/
# 2) modpost is then used to
# 3)  create one <module>.mod.c file pr. module
# 4)  create one Module.symvers file with CRC for all exported symbols
# 5) compile all <module>.mod.c files
# 6) final link of the module to a <module.ko> file

# Step 3 is used to place certain information in the module's ELF
# section, including information such as:
#   Version magic (see include/vermagic.h for full details)
#     - Kernel release
#     - SMP is CONFIG_SMP
#     - PREEMPT is CONFIG_PREEMPT
#     - GCC Version
#   Module info
#     - Module version (MODULE_VERSION)
#     - Module alias'es (MODULE_ALIAS)
#     - Module license (MODULE_LICENSE)
#     - See include/linux/module.h for more details

# Step 4 is solely used to allow module versioning in external modules,
# where the CRC of each module is retreived from the Module.symers file.

.PHONY: _modpost
ifeq ($(KBUILD_EXTMOD),)
_modpost: __modpost
endif

include .config
include $(CKBUILD_SRC)/scripts/Makefile.lib

symverfile := $(objtree)/Module.symvers

# Step 1), find all modules listed in $(MODVERDIR)/
__modules := $(sort $(shell grep -h '\.ko' /dev/null $(wildcard $(MODVERDIR)/*.mod)))
modules   := $(patsubst %.o,%.ko, $(wildcard $(__modules:.ko=.o)))

_modpost: $(modules)


# Step 2), invoke modpost
#  Includes step 3,4
quiet_cmd_modpost = MODPOST
      cmd_modpost = scripts/mod/modpost            \
        $(shell $(cmif) "$(CONFIG_MODVERSIONS)" -m)             \
	$(shell $(cmif) "$(CONFIG_MODULE_SRCVERSION_ALL)" -a)  \
	$(shell $(cmif) "$(KBUILD_EXTMOD)" -i -o) $(symverfile) \
	$(filter-out FORCE $(symverfile),$^)

.PHONY: __modpost
__modpost: $(wildcard vmlinux) $(modules:.ko=.o)
	$(cmd_modpost)

# CKBUILD NOTE : clearmake will incorrectly attempt to rebuild .o files for
# which a .c file exists using an implicit rule. This is the case for
# modules with a single source file. We work around this behaviour with
# the following rule.
$(modules:.ko=.o): ;

# CKBUILD NOTE : during external modules builds, KBUILD_EXTMOD is
# non-empty. In this case we explicitly declare how a .ko file is
# built rather than depending on the phony __modpost target in
# order to allow winkins to happen.
ifeq ($(KBUILD_EXTMOD),)
# Declare generated files as targets for modpost
$(symverfile):         __modpost ;
$(modules:.ko=.mod.c): __modpost ;
else
$(modules:.ko=.mod.c): $(modules:.ko=.o) $(wildcard $(symverfile))
	$(cmd_modpost)
endif


# Step 5), compile all *.mod.c files

# modname is set to make c_flags define KBUILD_MODNAME
modname = $(*F)

quiet_cmd_cc_o_c = CC      $@
      cmd_cc_o_c = $(CC) $(c_flags) $(CFLAGS_MODULE)	\
		   -c -o $@ $<

$(modules:.ko=.mod.o): %.mod.o: %.mod.c
	$(cmd_cc_o_c)

targets += $(modules:.ko=.mod.o)

# Step 6), final link of the modules
quiet_cmd_ld_ko_o = LD [M]  $@
      cmd_ld_ko_o = $(LD) $(LDFLAGS) $(LDFLAGS_MODULE) -o $@ 		\
			  $(filter-out FORCE,$^)

$(modules): %.ko :%.o %.mod.o
	$(cmd_ld_ko_o)

targets += $(modules)


# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

.PHONY: FORCE

FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif
